'use strict';

// tests for posts
// Generated by serverless-mocha-plugin

const mod = require('../app');
const mochaPlugin = require('serverless-mocha-plugin');

const wrapper = mochaPlugin.lambdaWrapper;
const expect = mochaPlugin.chai.expect;

const wrapped = wrapper.wrap(mod, { handler: 'handler' });

describe('posts', () => {
    let post;

    it('creates a post', () =>
        wrapped.run({
            httpMethod: 'POST',
            path: '/posts',
            body: { 
                title: "Test post",
                content: "Test content"
            },
            headers: {
                'Content-Type': 'application/json'
            }
        }).then((response) => {
            post = JSON.parse(response.body).post;
            expect(post.id).not.to.be.equal(null);
        }));

    it('updates the post', () =>
        wrapped.run({
            httpMethod: 'PUT',
            path: `/posts/${post.id}`,
            body: {
                title: 'Test post edited', 
                content: 'Test content edited',
                createdAt: post.createdAt
            },
            headers: {
                'Content-Type': 'application/json'
            }
        }).then((response) => {
            post = JSON.parse(response.body).post;
            expect(post.id).not.to.be.equal(null);
        }));

    it('gets the post', () => {
        post = post
        wrapped.run({
            httpMethod: 'GET',
            path: '/posts'
        }).then((response) => {
            console.log(post.id)
            const createdPost = JSON.parse(response.body).Items.filter(item => {
                item.id === post.id
                })[0];
            expect(createdPost.id).to.be.equal(post.id);
            expect(createdPost.title).to.be.equal('Test post edited');
            expect(createdPost.content).to.be.equal('Test content edited');
            expect(createdPost.date).to.be.equal(post.date);
        })
    });

    it('deletes a post', () =>
        wrapped.run({
            httpMethod: 'DELETE',
            path: '/posts'+ {
                id: post.id,
            },
        }));

    it('checks that the post is deleted', () =>
        wrapped.run({
            httpMethod: 'GET',
            path: '/posts',
        }).then((response) => {
            const createdPost = JSON.parse(response.body).Items.filter(item => item.id === post.id);
            expect(createdPost).to.be.eql([]);
        }));
});
